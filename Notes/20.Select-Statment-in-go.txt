🧠 What is the select statement?
---------------------------------

The select statement in Go is like a multi-lane toll booth for channels. It allows a Go program to wait on multiple channel operations — whichever one is ready first, gets served!

🛍️ Real-life Analogy: Pizza Order Counter (again!)
-----------------------------------------------------

Imagine a pizza shop with 3 counters. Each counter represents a channel:

🍕 Counter 1: Handles delivery for cheese pizzas.

🍕 Counter 2: Handles delivery for pepperoni pizzas.

🍕 Counter 3: Handles drinks.

The chef (your Go program) uses a select block to wait for whichever counter is ready first. As soon as any one counter has something ready — the chef serves it.

🧑‍💻 Syntax:


select {
case msg1 := <-ch1:
    fmt.Println("Received", msg1)
case msg2 := <-ch2:
    fmt.Println("Received", msg2)
default:
    fmt.Println("No channels ready")
}


✅ Explanation:
case msg1 := <-ch1: If ch1 has a value ready to receive, it will receive it and run this block.

case msg2 := <-ch2: If ch2 is ready first, it will go here instead.

default: Runs only if none of the channels are ready.

💡 Example:

package main

import (
	"fmt"
	"time"
)

func main() {
	ch1 := make(chan string)
	ch2 := make(chan string)

	go func() {
		time.Sleep(2 * time.Second)
		ch1 <- "Cheese Pizza"
	}()

	go func() {
		time.Sleep(1 * time.Second)
		ch2 <- "Pepperoni Pizza"
	}()

	select {
	case msg1 := <-ch1:
		fmt.Println("Received from ch1:", msg1)
	case msg2 := <-ch2:
		fmt.Println("Received from ch2:", msg2)
	default:
		fmt.Println("No pizzas ready yet...")
	}
}



output after nearly 1 second:

Received from ch2: Pepperoni Pizza


Why? Because ch2 was ready first!

⏱️ select with time.After
Want to avoid waiting forever? Use time.After:

select {
case msg := <-ch:
	fmt.Println("Got:", msg)
case <-time.After(2 * time.Second):
	fmt.Println("Timeout! No response.")
}

🔁 Looping with select
You can use select inside a loop to continuously wait on channels:

for {
	select {
	case msg := <-ch1:
		fmt.Println("Got from ch1:", msg)
	case msg := <-ch2:
		fmt.Println("Got from ch2:", msg)
	default:
		fmt.Println("Waiting...")
		time.Sleep(time.Second)
	}
}


🎯 When to Use select
Use select when:

You want to read from multiple channels.

You're not sure which channel will be ready first.

You want to add a timeout or a fallback using default.







