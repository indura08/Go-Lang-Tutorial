🧠 What the heck is a pointer?
-------------------------------
A pointer is like a home address for a variable.

Instead of giving you the actual value, it gives you the location where that value lives in memory.

💡 Think of it like this:
---------------------------
If a variable is your house, then a pointer is your Google Maps location link to that house.


🧪 Regular vs Pointer: A Mini Example
======================================

package main

import "fmt"

func main() {
    num := 10         // a normal variable
    ptr := &num       // a pointer to num

    fmt.Println("Value of num:", num)      // 10
    fmt.Println("Address of num:", &num)   // 0xAABBCC (some memory address)
    fmt.Println("Value in ptr:", ptr)      // 0xAABBCC (same memory address)
}

🧠 & means: "Give me the address"

When you write &num, you're saying "I don’t want the value — I want the location."


🎯 What's the point (pun intended)?
-----------------------------------

Pointers are useful when:

You want to change a variable inside a function (because normally Go passes copies).

You want to save memory by not copying huge data structures.

You’re doing low-level programming (like building stuff with slices, structs, etc.)


🔄 Dereferencing: Using * to get the value
-------------------------------------------

func main() {
    num := 42
    ptr := &num

    fmt.Println(*ptr) // prints 42
}


*ptr means: “Go to the address and bring me the actual value.”


🔧 Changing a value using a pointer
------------------------------------

func main() {
    num := 5
    ptr := &num

    *ptr = 100 // changes the value at that address

    fmt.Println(num) // 100 — because we modified it using the pointer!
}


💥 Powerful stuff — the original variable got changed!

🤹‍♂️ Pointers in Functions
--------------------------
❌ Without pointer

func change(val int) {
    val = 99
}

func main() {
    x := 10
    change(x)
    fmt.Println(x) // Still 10 ❌
}


✅ With pointer

func change(val *int) {
    *val = 99
}

func main() {
    x := 10
    change(&x)
    fmt.Println(x) // Now it's 99 ✅
}

You passed the address, not just the value — so the function could change the real thing.

📦 Pointers with Structs (Real-world example)
---------------------------------------------

type Person struct {
    name string
}

func changeName(p *Person) {
    p.name = "Alice"
}

func main() {
    person := Person{name: "Bob"}
    changeName(&person)
    fmt.Println(person.name) // Alice
}









