🟢 So what is a slice?
----------------------

Think of it like this:

Array = fixed size, Slice = dynamic, resizable layer built over arrays.

It’s like upgrading from a fixed lunchbox 🍱 (array) to a magical expandable bag 🧳 (slice)!

✅ How to create a slice
-------------------------

1. From an array

arr := [5]int{10, 20, 30, 40, 50}
slice := arr[1:4] // from index 1 up to (but not including) 4
fmt.Println(slice) // Output: [20 30 40]

It’s like taking a piece of the array 🍰

2. Directly as a slice (no array needed)

nums := []int{1, 2, 3, 4, 5}
fmt.Println(nums)

💡 Notice: []int → no size mentioned = slice.

3. Using make() function

slice := make([]int, 3) // length 3, all zeros
fmt.Println(slice) // [0 0 0]

You can also add capacity:

slice := make([]int, 3, 5) // len=3, cap=5

🔁 Looping through a slice
---------------------------

Same as arrays:

nums := []int{100, 200, 300}
for i, v := range nums {
	fmt.Println("Index:", i, "Value:", v)
}

✨ Slice superpowers
---------------------

➕ Append new items

nums := []int{1, 2, 3}
nums = append(nums, 4, 5)
fmt.Println(nums) // [1 2 3 4 5]

🔪 Slicing a slice (slicetion? 😄)

sub := nums[1:4]
fmt.Println(sub) // picks from index 1 to 3

📏 Length and Capacity

fmt.Println(len(nums)) // number of elements
fmt.Println(cap(nums)) // total space before reallocation


💥 Wait… what's the difference again?

Feature			Array			Slice
----------------------------------------------------------------------------
Fixed Size		✅ Yes			❌ Nope, can grow/shrink
Easy Append		❌ No			✅ Yes (append())
Memory			Whole block reserved	Points to part of an array


Q: You said:
slice4 := make([]int, 3, 5) //3 means length 5 means capacity
	slice4 = append(slice4, 10, 87, 94, 63)
	fmt.Println(slice4)
	fmt.Println("Capacity of the aray is :", cap(slice4), " lenth of the aray is :", len(slice4)) 
	
	in this code segment capacity of the array is 10 and length of the array is 7 ? how it becomes 10 and 7 from 3 5 ?
	
A:

Now you append three more elements to it:

When you append to a slice in Go, if the current length + new elements exceeds the capacity, Go will automatically allocate more memory for the slice and double the capacity.

Step-by-step breakdown of what happens:

Before append:

slice4 has 3 elements with a capacity of 5.

When you append:

You're adding 4 new elements (10, 87, 94, 63).

The current length is 3, so after adding 4 elements, the length becomes 7.

But:

Since the original capacity was 5, Go will realize it’s not enough to hold 7 elements, so it will resize the underlying array.

How Go resizes:

Go doubles the capacity (which is often the case, but not always exactly double) — so in this case, it increases the capacity from 5 to 10.

Thus:

Length: 7 (because 3 + 4 new elements)

Capacity: 10 (because Go doubled the capacity from 5)


Range Keyword
---------------

for index, value := range myArray {
	fmt.Println(index, value)
}

🤔 What is range?

In Go, the keyword range is used to loop over:

Arrays

Slices

Maps

Strings

Channels

🌀 Is it like foreach in C#/Java?
✅ Yes — it's kind of like foreach, but with a twist.
In C# or Java:

foreach (var item in myArray) {
    Console.WriteLine(item);
}

You only get the value.

But in Go:

for index, value := range myArray {
	fmt.Println(index, value)
}

You get both:

index → the position in the array/slice (like 0, 1, 2...)

value → the actual value at that index

🧠 You can do different things with range:
-------------------------------------------

✅ Only the value:

for _, value := range myArray {
	fmt.Println(value)
}

Use _ if you don’t care about the index.

✅ Only the index:

for index := range myArray {
	fmt.Println(index)
}

💡 So what's special about range?
----------------------------------

It's a Go-style way to loop.

It works on all iterable data (arrays, slices, strings, etc.).

It's super clean and readable.

🎯 Example:

names := []string{"Eliana", "Vivienne", "Luna"}

for i, name := range names {
	fmt.Println("Index:", i, "Name:", name)
}

🖨️ Output:

Index: 0 Name: Eliana
Index: 1 Name: Vivienne
Index: 2 Name: Luna












